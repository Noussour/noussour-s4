Chapitre 0 : intro

    # THL en informatique, en linguistique, en biologie, la compilation, la recherche de motifs, le traitement automatique des langues naturelles, la vérification des circuits électroniques, le traitement de l'image, et la bio-informatique

    #La théorie des langages, vise à décrire et reconnaître formellement les langages à l'aide de notions telles que les grammaires et les automates. Cette théorie trouve des applications dans des domaines comme

    #Le langage (naturelles/programmation) est un ensemble de phrases ou de mots qui obéissent à certaines règles.(Les langages servent à communiquer, décrire des systèmes ou des documents, de formaliser des problèmes pour les résoudre )

Chaptire 1 : notions fondamentals------------------------------------------------------------------------------------------

    #ALPHABET : Un alphabet X est un ensemble fini et non vide. Les éléments de cet ensemble sont appelés des lettres ou symboles.

    #MOTS :Un mot sur un alphabet X est une suite finie, éventuellement vide,d’éléments de X.
            *Le mot vide (suite vide d’éléments) est noté ԑ .
            *L’ensemble des mots formés à partir d’un alphabet X est noté X*.
            *X+ est l’ensemble des mots non vides. On a X*=X+ U {ԑ }. (infinie)
        ##Operations sur les MOTS
        1) Concaténation : juxtaposition de deux mot w1 et w2 (w1.w2)(w1w2) (associative,ԑ element neutre, pas commutative)
        2) Longueur : On appelle longueur d’un mot w sur un alphabet X la somme des occurrences des différents symboles le constituant. Elle est notée lg(w) (ou | w |) ,(application de X* vers N)
        3)Miroir : On appelle mot miroir d’un mot w, noté Mir(w) ou wR le mot obtenu en inversant les symboles de w.
        4)Puissance :Définition: La puissance d’un mot est définie par récurrence de la manière suivante :
                    w^0 = ԑ
                    w^n+1 = w^n.w
        5) Factorisation Soient v et w deux mots de X*.
            v est facteur ou sous-mot du mot w si et seulement s’il existe deux mots u1, u2 appartenant à X* tel que : w= u1.v.u2
                o Le mot v est facteur propre du mot w si u1 !=ԑ  et u2 !=ԑ  .
                o Le mot v est facteur gauche (ou préfixe) de w si u1!=ԑ .
                o Le mot v est facteur droit (ou suffixe) de w si u2!=ԑ


    #LANGAGE :Soit X un alphabet. On appelle langage formel défini sur X tout sous-ensemble de X*.
                    -langage vide (O bar) (ne contient aucun mot)
                    -langage propre ne contient pas le mot vide.
                    -langage fini contient un nombre fini de mots.
                    -langage infini est un langage qui contient une infinité de mots.(ni vide ni finie)
                            *semi-decidable = decrits par une grammaires formelle
                            *non-decidable = ne peut pas etre decrits

        ##Operations sur les LANGAGES : (toute operation sur les mots) + Union ,Intersection :L1 ∩ L2 ,Complément ,Différence :L1 − L2 ,Produit :L1 × L2

        L1.(langage vide) = langage vide
        ԑ . L1 = L1

        Fermeture itérative ou Etoile de Kleen L* ,L’étoile propre (ou ԑ libre) L +
         si ԑ appartient L alors ԑ appartient L* et L +
         si ԑ n'appartient pas L alors ԑ appartient seulement a L*

#Chapitre 2 :GRAMMAIRE -----------------------------------------------------------------------------------------------------------------
     ## GRAMMAIRE(systeme de substitution) : Un langage peut être décrit comme étant un ensemble de mots satisfaisant un certain nombre de règles appelées grammaire.

            G=(T, N, S, P) où :
                * T est un ensemble non vide de terminaux (l’alphabet sur le quel est défini le langage).
                * N est un ensemble de non-terminaux tel que T inter N= vide, ce sont des symboles intermédiaires pour produire de nouveaux objets (c’est les symboles qu’il faut encoredéfinir). Ils sont désignés par les lettres majuscules de l’alphabet Latin
                *S appartenant a N est appelé axiome (le point de départ).
                * P est un ensemble de règles de productions ou de réécritures.

    ## derivation directe : w1=>w2 (w1 derive (produit) w2)(w2 derive directement a partir de w1) si il existe une regle de produciton:
        a->b tellque w1=uav, w2=ubv
    ## derivation indirecte : w1=>*w2 w1 dérive (ou produit) indirectement w2

    ##Le langage engendré par une grammaire G=(T,N,S,P), noté L(G), est exactement l’ensemble des mots appartenant à T* générés (directement ou indirectement) à partir de l’axiome.

    ## Une règle d’arrêt : S -> ab
    ## Une règle récursive : S -> aSb

    ##Deux grammaires G1 et G2 sont dites équivalentes, notées G1  G2, si elles engendrent le même langage. G1 -= G2 <-> L(G1)=L(G2)
    ## Un langage peut être généré par plusieurs grammaires, mais une grammaire ne génère qu’un seul langage.

    #Classification des grammaires :Noam Chomsky a décomposé les grammaires formelles en catégories de pouvoir d’expression croissant, c’est-à-dire en groupes successifs pouvant chacun générer une variété de langages plus large que le groupe précédent.

    #Type 3 (Grammaires régulières) : Une grammaire G=(T, N, S, P) est de type 3 ssi elle est soit régulière droite soit régulière gauche.
                A->wB / B appartenant (N*) / w appartenant (T*)


    #Type 2 (Grammaires algébriques ou grammaires à contexte libre) :Une grammaire G=(T, N, S, P) est de type 2 si et seulement si toutes les productions de P sont de la forme : A -> a : A appartenant a N (un seul non terminal)

    #Type 1 (Grammaires Contextuelles ou contexte lié) :Une grammaire G=(T, N, S, P) est de type 1 si et seulement si toutes les règles de production de P sont de la forme :
        aAb-> awb avec a,b appartenant(T u N)*, A appartenant N , w appartient(T u N)+ :  seul l’axiome peut générer le mot vide et dans ce cas il n'appait dans aucun membre droits d'une regle

        ##Définition (Grammaires monotones) Une grammaire G=(T, N, S, P) est monotone si et seulement si toutes les règles de production sont de la forme :  a-> b avec |a|=<|b|  seul l’axiome peut générer le mot vide ne peut jamais décroitre.

    #Type 0 (Grammaire sans restriction ou Grammaire Générale) Une grammaire G=(T, N, S, P) est de type 0 si la forme des règles de production dans P n’est l’objet d’aucune restriction

    type 3 inclue type 2 inclue type 1 inclue type 0.


     Les grammaires de type 3 génèrent les langages réguliers. automates d’états finis (AEF).
     Les grammaires de type 2 génèrent les langages algébriques ou à contexte libre.  automates à piles (AàP).
     Les grammaires de type 1 génèrent les langages contextuels ou à contexte lié . automates à bornes linéaires(ABL).
     Les grammaires de type 0 génèrent tous les langages récursivement énumérables. machines de Turing.


    Un langage est strictement de type i : 1- s’il est engendré par une grammaire de type i  et il n’existe pas de grammaire de type supérieur à i qui l’engendre


# Chapitre 3 : Automates d'etats finis (AEF) ------------------------------------------------------------------------------------------
    ## Un automate (ou système de reconnaissance) est une machine abstraite qui permet de reconnaître les mots d’un langage. Il prend en entrée un mot w et fournis une acceptation ou rejection

    ##Automates d’états finis (AEF) Un automate d’états finis déterministe est un cinquplet A =(X, Q, q0, S, F) où :

        S(p, a)=q signifie que l’automate réalise un déplacement (une transition) de l’état p vers l’état q en lisant la lettre a.
        -S* successtion de transition de QxX* dans Q
        -Un mot w est reconnu (accepté) par l'automate A ssi : 1- l’automate A lit le mot w à partir de q0 et atteint un état final.

        -Le langage reconnu par l’automate A est l’ensemble
                L(A) = {w appartient a X*/ S*(q0, w) appartient a F}.
        -langage L sur X est régulier (ou reconnaissable) s’il existe au moins un automate d’états finis A ayant X comme alphabet d’entrée tel que L=L(A)

        -On note Rec(X*) la famille des langages reconnaissables sur l’alphabet X.
        -Deux automates d’états finis A1 et A2 sont équivalents, noté A1-=A2, si et seulement s’ils acceptent le même langage.
        -Un langage peut être reconnu par plusieurs automates. Par contre un automate ne peut reconnaitre qu’un seul langage.

        ## Un automate d’états fini est déterministe si et seulement si : à un état et à un symbole d’entrée la fonction S associe au plus une seule transition. (pas de choix à faire pour l’état suivant après la lecture d’un certain symbole.)
            -dit complet ssi : à toute paire (q,a) appartient QxX, la fonction S associe exactement un état.(application fonctionnelle)( lire n’importe quel symbole à partir de n’importe quel état.)
            -Un automate déterministe non complet ne permet pas de lire certains mots
        ## non déterministes sont des automates où : l’on permet plusieurs transitions correspondant a à la même lettre : S QxX -> P(Q)
        ## généralisé, les transitions directes peuvent être causées par des mots ou transition spantanees (ԑ-transitions.)(change d'etat sans lire un symbole) S : QxX*->P(Q)
            -état q est accessible s'il existe un chemin de l'état initial de l'automate vers q
            - état q est co-accessible s'il existe un chemin de l'état q vers un état final
            -Un automate est émondé si tous ses états sont accessibles et co-accessibles.


        ## transformer vers un DFA :  1-Transformer un automate généralisé vers un automate simple
                                      2-Transformer l’automate simple vers un automate déterministe (Pour tout automate fini non déterministe il existe un automate fini déterministe équivalent)

        ## La classe des langages réguliers est fermée par rapport aux opérations de l’union, la concaténation, l’étoile, le complément et le miroir.
        Si L et M sont deux langages réguliers alors : L U M, L.M, L*, L et LR sont des langages réguliers.


# Chapitre 5 : Les Expressions Régulières (ER)
    #Une expression régulière (rationnelles) est une suite de caractères, appelée motif (ou pattern en anglais), qui décrit ou dénote un ensemble de mots.

            Si r et s sont deux expressions régulières sur X décrivant respectivement les langages R et S alors :
                •r+s est une expression régulière qui décrit le langage R U S
                •r.s est une expression régulière qui décrit le langage R.S
                •r* est une expression régulière qui décrit le langage R*
                •(r) est une expression régulière qui décrit le langage R
            -Deux expressions régulières E1 et E 2 sont équivalentes, notées E1E2, si et seulement si elles dénotent le même langage.

            ## priorite :étoile>concaténation>addition
            Un langage L sur un alphabet X est un langage rationnel si et seulement s’il existe une expression régulière E sur l’alphabet X qui le dénote
             Rat(X*) la famille des langages rationnels sur X.


    #Théorème de Kleene : L'ensemble des langages rationnels (décrits par des expressions régulières) sur un alphabet X est exactement l'ensemble des langages sur X reconnaissables par automate d’états finis
            Rat(X*) = Rec(X*)
        ## regex->automate : méthode de Thompson, de Glushkov, de Brzozowski (méthode des dérivées).

        Les expressions régulières ont de nombreuses utilités en informatique : des contrôles,substitutions,des filtres,des découpages

        lemme de pompe (l'Etoile): tout mot suffisamment long d'un langage régulier infini peut être pompé :
                            -une partie centrale du mot peut être répétée un nombre quelconque de fois, et que chacun des mots produits appartient au langage
        Si L est régulier alors il existe un entier k>0 tel que pour tout w appartient a L  et |w|>=k, il existe x, z appartenant X* et y appartenant a X+ tels que :
            1) w= xyz 2) |xy|<=k 3) xyiz apparient a L pour tout i >0;

Chapitre 6 : grammaire algébriques et Automates a pile :
                Les langages réguliers :• sont simples• possèdent les bonnes propriétés requises théoriques et pratiques• ...mais pouvoir d’expression faible

        ##Définition (Dérivation gauche/droite) : On dit qu’un mot s’obtient par dérivation gauche (respectivement par dérivation droite) s’il est obtenu à partir de l’axiome en dérivant toujours le non-terminal le plus à gauche (respectivement le plus à droite).

         ## Un mot est ambiguë s’il possède plusieurs arbres de dérivations différents.L’ambiguité d’un mot implique l’existence de deux ou plusieurs dérivations gauche (droites) pour ce mot.
         ## (Grammaire ambiguë) : Une grammaire est ambiguë si elle génère au moins un mot ambiguë.
         ##Un langage de programmation doit avoir une grammaire non ambiguë car l’existence d’arbres de dérivations différents pour un même programme signifie qu’il y a plusieurs façons d’analyser ce programme, avec en général des résultats très différents.
         ## (Ambiguïté inhérente) : On dit qu’un langage algébrique a une ambiguïté inhérente si toute grammaire qui l’engendre est ambiguë.
         ##  Il n’existe pas d’algorithme qui permet de répondre est-ce que G est ambiguë?

    #Automates à Pile Les automates à pile sont les reconnaisseurs des langages algébriques. (autorise les ԑ transition)(memoire auxiliaire :pile)

    #(Configuration d'une pile) : configuration (a, q, w). le sommet de pile est a ,on est sur l'etat q et reste a lire w
         ##dérive directement (aB, p, w), notée : (au, q, aw) => (aB, p, w) si uqa -> Bp

         ##Automates à Pile Deux modes de reconnaissances : par état final / par pile vide
         ##Les langages reconnus par les automates à pile correspondent à la classe des langages algébriques.
         ##  Pour toute grammaire algébrique G=(T, N, S, P) il existe un automate à pile qui reconnaît L(G) par pile vide.
         ##Pour tout automate à Pile il existe une grammaire algébrique
         ##La classe des langages algébriques est fermée par rapport aux opérations régulières :union, concaténation et l’étoile.
         ##La classe des langages algébriques n’est pas fermée par rapport à l’intersection et par rapport au complément :

         L (algebrique) INTER R(Regulier) est algebrique
         mirroir d'un language algebrique est algebrique
